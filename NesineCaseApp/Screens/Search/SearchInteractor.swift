//
//  SearchInteractor.swift
//  NesineCaseApp
//
//  Created by AnÄ±l Taha Uyar on 9.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol SearchBusinessLogic {
    func getSoftware(with searchText: String)
    func getImages(with imageURL: [SearchModel.ResultModel])
}

protocol SearchDataStore {
    var screenshotUrls: String? { get set }
}
class SearchInteractor: SearchBusinessLogic, SearchDataStore {
    
    var presenter: SearchPresentationLogic?
    var screenshotUrls: String?
    
    
    func getSoftware(with searchText: String) {
        let query: String = "term=" + searchText.toBaseUrlQuery() + "&media=software"
        let endPointUrl = URL(string: BASE_URL + query)
        
        if let endPointUrl = endPointUrl {
            NetworkManager.shared.getSoftware(ofURL: endPointUrl, callback: {[weak self] (response, error) in
                if let response = response, let results = response.results {
                    //                    self?.presenter?.presentSoftware(response: response)
                    self?.getImages(with: results)
                }
            })
        }
    }
    
    func getImages(with resultModels: [SearchModel.ResultModel]) {
        
        var uiImageList: [SearchModel.ImageModel]?
        var allUrls: [URL] = []
        var smallSizeSection: [UIImage] = []
        var largeSizeSection: [UIImage] = []
        var xLargeSizeSection: [UIImage] = []
        var xxLargeSizeSection: [UIImage] = []
        
        for resulModel in resultModels {
            let urls: [URL]? = resulModel.screenshotUrls?.map{ URL(string: $0)!}
            allUrls.append(contentsOf: urls!)
        }
        NetworkManager.shared.downloadAllImages(allUrls) {[weak self] images in
            images.forEach { image in
                if let imagePngData = image.pngData() {
                    let imageSize = imagePngData.count
                    if imageSize > SearchModel.ImageSizeType.XLARGE_SIZE.rawValue {
                        xxLargeSizeSection.append(image)
                    }
                    else if imageSize > SearchModel.ImageSizeType.LARGE_SIZE.rawValue {
                        xLargeSizeSection.append(image)
                    }
                    else if imageSize > SearchModel.ImageSizeType.SMALL_SIZE.rawValue {
                        largeSizeSection.append(image)
                    }else {
                        smallSizeSection.append(image)
                    }
                }
            }
            let imageModel = SearchModel.ImageModel.init(smallSizeSection: smallSizeSection,
                                                         largeSizeSection: largeSizeSection,
                                                         xLargeSizeSection: xLargeSizeSection,
                                                         xxLargeSizeSection: xxLargeSizeSection)
            self?.presenter?.presentSoftware(with: imageModel)
        }
    }
    
}


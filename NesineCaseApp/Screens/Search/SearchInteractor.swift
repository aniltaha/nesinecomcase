//
//  SearchInteractor.swift
//  NesineCaseApp
//
//  Created by AnÄ±l Taha Uyar on 9.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol SearchBusinessLogic {
    func getSoftware(with searchText: String)
}

protocol SearchDataStore {
    var screenshotUrls: String? { get set }
}
class SearchInteractor: SearchBusinessLogic, SearchDataStore {
    
    var presenter: SearchPresentationLogic?
    var screenshotUrls: String?
    
    
    func getSoftware(with searchText: String) {
        let query: String = "term=" + searchText.toBaseUrlQuery() + "&media=software"
        let endPointUrl = URL(string: BASE_URL + query.addingPercentEncoding(withAllowedCharacters: .urlFragmentAllowed)!)
        
        KingfisherManager.shared.cache.clearMemoryCache()
        KingfisherManager.shared.cache.clearDiskCache()
        
        if let endPointUrl = endPointUrl {
            NetworkManager.shared.getSoftware(ofURL: endPointUrl, callback: {[weak self] (response, error) in
                if let response = response, let results = response.results {
                    self?.getImages(with: results)
                }
            })
        }
    }
    
    func getImages(with resultModels: [SearchModel.ResultModel]) {
        
        var allUrls: [URL] = []
        for resulModel in resultModels {
            let urls: [URL]? = resulModel.screenshotUrls?.map{ URL(string: $0)!}
            allUrls.append(contentsOf: urls!)
        }
        allUrls.forEach { url in
            NetworkManager.shared.downloadImageOpKing(url) { image in
                
                if let imagePngData = image.pngData() {
                    var updatedItem: [String: Any] = [:]
                    updatedItem["image"] = image
                    let imageSize = imagePngData.count
                    if imageSize > SearchModel.ImageSizeType.XLARGE_SIZE.rawValue {
                        updatedItem["type"] = "xxlarge"
                    }
                    else if imageSize > SearchModel.ImageSizeType.LARGE_SIZE.rawValue {
                        updatedItem["type"] = "xlarge"
                    }
                    else if imageSize > SearchModel.ImageSizeType.SMALL_SIZE.rawValue {
                        updatedItem["type"] = "large"
                    }else {
                        updatedItem["type"] = "small"
                    }
                    NotificationCenter.default.post(name: NSNotification.Name(rawValue: "complatedImage"), object: nil, userInfo: updatedItem)
                }
            }
        }
        if (allUrls.isEmpty) {
            self.presenter?.presentEmptySoftware()
        }
    }
}


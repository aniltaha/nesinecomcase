//
//  SearchInteractorTests.swift
//  NesineCaseApp
//
//  Created by AnÄ±l Taha Uyar on 13.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import NesineCaseApp
import XCTest

class SearchInteractorTests: XCTestCase
{
    
    var sut: SearchInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupSearchInteractor()
    }
    
    // MARK: Test setup
    
    func setupSearchInteractor() {
        sut = SearchInteractor()
    }
    
    // MARK: Test doubles
    
    class SearchPresentationLogicSpy: SearchPresentationLogic {
        
        var presentEmptySoftwareCalled = false
        
        func presentEmptySoftware() {
            presentEmptySoftwareCalled = true
        }
    }
    // MARK: Tests
    func testPresentSoftwareEmpty() {
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        
        let predicate = NSPredicate(block: {any, _ in
            guard let spy = any as? SearchPresentationLogicSpy else {
                return false
            }
            XCTAssertTrue(spy.presentEmptySoftwareCalled)
            return spy.presentEmptySoftwareCalled
        })
        _ = self.expectation(for: predicate, evaluatedWith: spy, handler: .none)
        
        sut.getSoftware(with: "nesinecom")
        
        waitForExpectations(timeout: 15, handler: .none)
    }
    
    func testPresentSoftware() {
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        
        let predicate = NSPredicate(block: {any, _ in
            guard let spy = any as? SearchPresentationLogicSpy else {
                return false
            }
            XCTAssertFalse(spy.presentEmptySoftwareCalled)
            return !spy.presentEmptySoftwareCalled
        })
        _ = self.expectation(for: predicate, evaluatedWith: spy, handler: .none)
        
        sut.getSoftware(with: "nesine")
        
        waitForExpectations(timeout: 15, handler: .none)
    }
    
}
